---
layout:     post
title:      "Homework 3"
date:       2016-10-23 12:00:00
author:     "Java Course Staff"
header-img: "img/post-bg-universe.jpg"
header-mask: 0.3
catalog:    true
---

## 第三次作业

截止时间: 2016年11月20日 09:00

这次作业的内容是用 [shazam算法](http://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf) 实现音频检索(听歌识曲)。 shazam算法一共可以分成4个模块: 音频文件读取、指纹提取(hashing)、指纹存取、和指纹匹配。 关于这四个模块到底做什么，以及它们之间的关系，已经在群文件 [ppt](/img/hw3.7z) 中详细说明。

建议大家组队完成项目，一队3-4人为宜，最多4人。分工自行协商，每个人至少负责一个完整的模块。

知识性的内容已经在ppt中做了充分的介绍。在网页中主要是介绍提交的注意事项。

------------------------------------

#### 团队要求

1. 只需队长建库，其他人不需建库。队长需在根目录下放一个成员名单，说明成员（含队长）的姓名、学号和分工。
2. **每个人至少2次commit**，否则此人不给分。
3. 远程仓库的目录结构要和本地intellij/eclipse项目的目录结构一致。 不得在项目外再套文件夹。 换句话说，git根目录就是项目根目录。
4. 所有文档(截图，txt等)放在项目根目录的doc文件夹下。
5. 由于音频文件过大，**不得放在项目目录**中。请自行在程序入口放置Scanner来读取音频文件(夹)的路径。
6. 一个模块一个package。
7. 有`merge commit`的团队，可以加团队分。

两个建议: 

1. 多人合作的项目总要有一个初始版本，这样才方便其他人在这个版本上一点一点地推进项目。 音频文件读取是最固定的模块，因此适合作为初始版本。
2. 每次打开项目之前一定别忘了先pull一下！！！

#### 音频读取

1. 音频文件一律采用【PCM WAV格式存储，位深度16bit，采样率44100Hz，单声道，不携带元信息。】
2. [样例音频库 提取码 4zk2](http://pan.baidu.com/s/1qXYTDGo)
3. 写一个测试类: 任挑一首歌或其片段，把它的时序信息输出到txt。 之后把txt中内容粘贴到matlab，同时用matlab读取原始音频，比较两个波形。

#### 指纹提取

这个模块没有有效的单元测试手段，只能看最终结果。

#### 匹配打分

匹配至少5个歌曲片段，结果截图。

#### 指纹存取(即数据库模块)

1. 允许的数据库: MySQL，PostgreSQL。严禁使用Oracle，因为它会给队友带来很多麻烦。
2. 在lib中附加jdbc引擎，并提交到git。
3. 写一个测试类: 查询并输出当前时间。
4. 保留建表SQL。

-------------------------------------

#### 提交内容小结

1. 项目代码。
2. 建表sql，放在doc目录下。
3. 波形对比截图。
4. 查询当前时间截图。
5. 至少5个匹配结果截图。

#### 需要的工具小结

除编程工具(jdk、intellij/eclipse、数据库)外，可能还需要UltraEdit、Adobe Audition、Matlab。

--------------------------------------

## 附录

#### 如何生成PCM WAV文件？

以Adobe Audition为例，

批量转换:

![BatchConvert](/img/hw3/BatchConvert.png)

保存选区:

![BatchConvert](/img/hw3/SaveSelection.png)

#### 如何在matlab中验证音频解析的结果？

建议自己截一段几秒十几秒的音乐来验证，不要用整首歌，太大了。

首先，把算出来的double数组打印到文件，打成`[ d1 d2 ...... dn ]`的格式。

``` Java
PrintWriter out = new PrintWriter(new FileWriter(new File("test.txt")));
out.print("[ ");
for (int i=0; i < sequence.length; ++i) {
	out.printf("%.2f ", sequence[i]);
}
out.println("];");
```

打出来的内容就是Matlab中的一个数组变量. 之后在Matlab中输入

``` Matlab
a = PASTE
```

其中，PASTE为test.txt全选复制的内容。这样就在Matlab中定义了数组变量a。

之后在Matlab中直接读取原音频，生成变量b。

``` Matlab
[b sr] = audioread('音频目录'); b = b';
```

b是时序数据，sr是采样率。

最后用Matlab绘制a和b的波形图。

``` Matlab
subplot(2,1,1), plot(a./32768); subplot(2,1,2), plot(b);
```

会出现这样的一个图表：

![Matlab](/img/Matlab.png)

上面是你自己算出来的，下面是Matlab读出来的。如果你的和Matlab的波形是一样的，就说明文件读取成功了。

#### 傅里叶代码

首先是Java的复数类

``` Java
class Complex {
    private final double re;   // the real part
    private final double im;   // the imaginary part

    // create a new object with the given real and imaginary parts
    public Complex(double real, double imag) {
        re = real;
        im = imag;
    }

    // a static version of plus
    public static Complex plus(Complex a, Complex b) {
        double real = a.re + b.re;
        double imag = a.im + b.im;
        Complex sum = new Complex(real, imag);
        return sum;
    }

    // return a string representation of the invoking Complex object
    public String toString() {
        if (im == 0) return re + "";
        if (re == 0) return im + "i";
        if (im < 0) return re + " - " + (-im) + "i";
        return re + " + " + im + "i";
    }

    // return abs/modulus/magnitude and angle/phase/argument
    public double abs() {
        return Math.hypot(re, im);
    }  // Math.sqrt(re*re + im*im)

    public double phase() {
        return Math.atan2(im, re);
    }  // between -pi and pi

    // return a new Complex object whose value is (this + b)
    public Complex plus(Complex b) {
        Complex a = this;             // invoking object
        double real = a.re + b.re;
        double imag = a.im + b.im;
        return new Complex(real, imag);
    }

    // return a new Complex object whose value is (this - b)
    public Complex minus(Complex b) {
        Complex a = this;
        double real = a.re - b.re;
        double imag = a.im - b.im;
        return new Complex(real, imag);
    }

    // return a new Complex object whose value is (this * b)
    public Complex times(Complex b) {
        Complex a = this;
        double real = a.re * b.re - a.im * b.im;
        double imag = a.re * b.im + a.im * b.re;
        return new Complex(real, imag);
    }

    // scalar multiplication
    // return a new object whose value is (this * alpha)
    public Complex times(double alpha) {
        return new Complex(alpha * re, alpha * im);
    }

    // return a new Complex object whose value is the conjugate of this
    public Complex conjugate() {
        return new Complex(re, -im);
    }

    // return a new Complex object whose value is the reciprocal of this
    public Complex reciprocal() {
        double scale = re * re + im * im;
        return new Complex(re / scale, -im / scale);
    }

    // return the real or imaginary part
    public double re() {
        return re;
    }

    public double im() {
        return im;
    }

    // return a / b
    public Complex divides(Complex b) {
        Complex a = this;
        return a.times(b.reciprocal());
    }

    // return a new Complex object whose value is the complex exponential of this
    public Complex exp() {
        return new Complex(Math.exp(re) * Math.cos(im), Math.exp(re) * Math.sin(im));
    }

    // return a new Complex object whose value is the complex sine of this
    public Complex sin() {
        return new Complex(Math.sin(re) * Math.cosh(im), Math.cos(re) * Math.sinh(im));
    }

    // return a new Complex object whose value is the complex cosine of this
    public Complex cos() {
        return new Complex(Math.cos(re) * Math.cosh(im), -Math.sin(re) * Math.sinh(im));
    }

    // return a new Complex object whose value is the complex tangent of this
    public Complex tan() {
        return sin().divides(cos());
    }
}
```

然后是Java的FFT代码。这个代码内存利用率不高，在数据较大时经常触发cache miss和换页。

``` Java
public class FFT {

    public static final int WINDOW_SIZE = 4096;

    /**
     * Perform FFT on a 4096-sample slice.
     * For a 44100 Hz audio, the slice is 4096/44100 sec, nearly 0.1s.
     * NOTE: The scale of the returned frequencies is 44100/4096 times of the array index.
     *
     * @param slice  An audio frame (time-domain) with 4096 samples.
     * @return       The energy of "each frequency".
     */
    public static double[] fft(double[] slice) {
        if (slice.length != WINDOW_SIZE)
            throw new RuntimeException("FFT::fft(double[] slice) - " +
                    "The window size is not equal to the required window size (" + WINDOW_SIZE + ")");

        Complex[] x = new Complex[WINDOW_SIZE];

        /**
         * Convert the time-domain series as Complex series whose imaginary parts are zeros.
         */
        for (int i = 0; i < WINDOW_SIZE; ++i) {
            x[i] = new Complex(slice[i], 0);
        }

        Complex[] res = fft(x);

        double[] ret = new double[WINDOW_SIZE];
        for (int i = 0; i < WINDOW_SIZE; ++i) {
            /**
             * The magnitude of each frequency.
             */
            ret[i] = res[i].abs();
        }
        return ret;
    }

    private static Complex[] fft(Complex[] x) {
        int N = x.length;
        if (N <= 1) return x;
        // fft of even terms
        Complex[] even = new Complex[N / 2];
        for (int k = 0; k < N / 2; k++) {
            even[k] = x[2 * k];
        }
        Complex[] q = fft(even);

        // fft of odd terms
        Complex[] odd = even; // reuse the array
        for (int k = 0; k < N / 2; k++) {
            odd[k] = x[2 * k + 1];
        }
        Complex[] r = fft(odd);
        Complex[] y = new Complex[N];
        for (int k = 0; k < N / 2; k++) {
            double kth = -2 * k * Math.PI / N;
            Complex wk = new Complex(Math.cos(kth), Math.sin(kth));
            y[k] = q[k].plus(wk.times(r[k]));
            y[k + N / 2] = q[k].minus(wk.times(r[k]));
        }
        return y;
    }
}
```

#### 指纹提取的部分实现

代码中append函数内部有一个TODO，这一块是找出每一帧音频中能量最高的N个频率，要自己实现。

``` Java
public class Fingerprint {

	// DO NOT write FFT.WINDOW_SIZE / 44100, it equals to 0 forever!!
    public static final double scaling = FFT.WINDOW_SIZE / 44100.0;

    public static final int N = 3;

    private ArrayList<int[]> constel_data = new ArrayList<>();
    private int id;

    /**
     * For songs about to add into DB
     * @param id
     */
    public Fingerprint(int id) {
        this.id = id;
    }

    /**
     * For songs about to be searched
     */
    public Fingerprint() {
        this.id = -1;
    }

    /**
     * Append a column of frequency peaks to the constellation map.
     * A frequency peak is a frequency value whose amplitude is the highest among
     * all frequencies in a frequency interval.
     *
     * @param freqDomain The frequency domain generated by FFT.
     */
    public void append(double[] freqDomain) {
        int[] freqPeaks = new int[N];

        /**
         * TODO: Find three frequencies with the highest amplitude(energy);
         */

        constel_data.add(freqPeaks);
    }

    /**
     * Generate fingerprints using Combinational Hash.
     * For each frequency peak, generate 6 fingerprints with its 6 successors.
     *
     * @return
     */
    public ArrayList<ShazamHash> combineHash() {
        if (constel_data.size() < 3)
            throw new RuntimeException("Too few frequency peaks");
        ArrayList<ShazamHash> hashes = new ArrayList<>();
        for (int i = 0; i < constel_data.size() - 2; ++i) {
            for (int k = 0; k < interval_num; ++k) {

            	// "Combine" with all peak frequencies inside its next two frames.
                for (int j = 1; j <= 2; ++j) {
                    for (int kk = 1; kk < interval_num; ++kk) {
                        ShazamHash hash = new ShazamHash();
                        hash.f1 = (short) constel_data.get(i)[k];
                        hash.f2 = (short) constel_data.get(i + j)[kk];
                        hash.dt = (short) j;
                        hash.offset = i;
                        hash.id = id;
                        hashes.add(hash);
                    }
                }
            }
        }
        return hashes;
    }
}
```